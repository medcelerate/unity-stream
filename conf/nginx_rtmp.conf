# server {
# 	listen 1935;
#     chunk_size 4000;

# 	application live {
# 		live on;
# 	}
# 	# application transcode {
# 	# 	live on;
#     #     record off;
# 	# 	exec_push /bin/ffmpeg -i rtmp://localhost/transcode/$name 
#     #         -c:v libx264 -vprofile main -level 3.1 -g 48 -keyint_min 48 -sc_threshold 0 -b:v 800k -c:a libfdk_aac -ar 44100 -vf "scale=640:trunc(ow/a/2)*2" -preset veryfast -crf 23 -f flv rtmp://localhost/cupertino/$name_low 
#     #         -c:v libx264 -vprofile main -level 3.1 -g 48 -keyint_min 48 -sc_threshold 0 -b:v 1000k -c:a libfdk_aac -ar 44100 -vf "scale=856:trunc(ow/a/2)*2" -preset veryfast -crf 23 -f flv rtmp://localhost/cupertino/$name_mid 
#     #         -c:v libx264 -vprofile main -level 3.1 -g 48 -keyint_min 48 -sc_threshold 0 -b:v 2000k -c:a libfdk_aac -ar 44100 -vf "scale=1280:trunc(ow/a/2)*2" -preset veryfast -crf 23 -f flv rtmp://localhost/cupertino/$name_high;
# 	# }
# 	# application cupertino {
# 	# 	live on;
# 	# 	hls on;
# 	# 	hls_type live;
# 	# 	hls_fragment_naming system;
# 	# 	hls_fragment 3; #500ms
# 	# 	hls_playlist_length 60; #12s
#     #     hls_fragment_slicing aligned;
# 	# 	hls_path /tmp/hls;
#     #     hls_variant _low BANDWIDTH=300000 AUDIO="audio" CODECS="avc1.4d001e,mp4a.40.34"; # Low bitrate, sub-SD resolution
#     #     hls_variant _mid BANDWIDTH=800000 AUDIO="audio" CODECS="avc1.4d001e,mp4a.40.34"; # Medium bitrate, SD resolution
#     #     hls_variant _high BANDWIDTH=1400000 AUDIO="audio" CODECS="avc1.4d001e,mp4a.40.34"; # High bitrate, higher-than-SD resolution
#     #     #hls_variant _src BANDWIDTH=20000000 AUDIO="audio" CODECS="avc1.4d001e,mp4a.40.34"; # Source bitrate, source resolution
#     #     deny play all;
# 	# }
# }

server {
		listen 1935; # Listen on standard RTMP port
		chunk_size 4000; 
		# ping 30s;
		# notify_method get;

		# This application is to accept incoming stream
		application live {
			live on; # Allows live input

			# for each received stream, transcode for adaptive streaming
			# This single ffmpeg command takes the input and transforms
			# the source into 4 different streams with different bitrates
			# and qualities. # these settings respect the aspect ratio.
			exec_push  /bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
						-c:v libx264 -c:a libfdk_aac -b:v 256k  -b:a 64k  -vf "scale=480:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_low
						-c:v libx264 -c:a libfdk_aac -b:v 768k  -b:a 128k -vf "scale=720:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_mid
						-c:v libx264 -c:a libfdk_aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2"  -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_high
						-c:v libx264 -c:a libfdk_aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv rtmp://localhost:1935/show/$name_hd720
						-c copy -f flv rtmp://localhost:1935/show/$name_src;
		}

		# This is the HLS application
		application show {
			live on; # Allows live input from above application
			deny play all; # disable consuming the stream from nginx as rtmp
			
			hls on; # Enable HTTP Live Streaming
			hls_fragment 3;
			hls_playlist_length 20;
			hls_path /var/hls/;  # hls fragments path
			# Instruct clients to adjust resolution according to bandwidth
			hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
			hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
			hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
			hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
			hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution			
		}
	}